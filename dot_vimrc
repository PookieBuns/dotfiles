set nocompatible
set number relativenumber
set signcolumn=yes
" set mouse=a
set cursorline
set cursorcolumn
set colorcolumn=88
set shiftwidth=4
set tabstop=4
set expandtab
set nowrap
set hlsearch
set incsearch
set ignorecase
set smartcase
set wildmenu
set encoding=utf8
set updatetime=300
set ffs=unix,dos,mac
set hidden
set clipboard=unnamedplus

let g:mapleader = ' '

" Install vim-plug if not found
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'arcticicestudio/nord-vim'
Plug 'joshdick/onedark.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jiangmiao/auto-pairs'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'easymotion/vim-easymotion'
" Plug 'vim-scripts/ReplaceWithRegister'
Plug 'rbong/vim-flog'
Plug 'mbbill/undotree'
Plug 'direnv/direnv.vim'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tomasiser/vim-code-dark'
Plug 'dstein64/vim-startuptime'
Plug 'wfxr/minimap.vim', { 'on': 'MinimapToggle' }
Plug 'takac/vim-hardtime'
Plug 'unblevable/quick-scope'
Plug 'iamcco/markdown-preview.nvim' " :call mkdp#util#install()
Plug 'img-paste-devs/img-paste.vim'
Plug 'sainnhe/gruvbox-material'
if has('nvim')
    Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
    Plug 'nvim-treesitter/nvim-treesitter-context'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.1' }
    Plug 'nvim-telescope/telescope-project.nvim'
    Plug 'nvim-tree/nvim-web-devicons'
    Plug 'nvim-tree/nvim-tree.lua'
    Plug 'nvim-lualine/lualine.nvim'
    Plug 'akinsho/bufferline.nvim', { 'tag': '*' }
    Plug 'lukas-reineke/indent-blankline.nvim'
    Plug 'mfussenegger/nvim-dap'
    Plug 'rcarriga/nvim-dap-ui'
    Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
    Plug 'Mofiqul/vscode.nvim'
    " requires vim9.0
    Plug 'github/copilot.vim'
else
    Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-python/python-syntax'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'catppuccin/vim', { 'as': 'catppuccin' }
endif

call plug#end()

set termguicolors
if has_key(plugs,'vscode.nvim')
    let g:gruvbox_material_diagnostic_virtual_text = 'colored'
    colorscheme gruvbox-material
else
    colorscheme catppuccin_mocha
endif

if has("vms")
    set nobackup      " do not keep a backup file, use versions instead
else
    set backup        " keep a backup file (restore to previous version)
    if has('persistent_undo')
        set undofile    " keep an undo file (undo changes after closing)
    endif
endif

if has("nvim")
    set undodir=~/.vim/backup/nvim//
    set backupdir=~/.vim/backup/nvim//
    set directory=~/.vim/backup/nvim//
else
    set undodir=~/.vim/backup/vim//
    set backupdir=~/.vim/backup/vim//
    set directory=~/.vim/backup/vim//
endif

" You can split the window in Vim by typing :split or :vsplit.
" Navigate the split view easier by pressing CTRL+j, CTRL+k, CTRL+h, or CTRL+l.
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Resize split windows using arrow keys by pressing:
" CTRL+UP, CTRL+DOWN, CTRL+LEFT, or CTRL+RIGHT.
noremap <c-up> <c-w>+
noremap <c-down> <c-w>-
noremap <c-left> <c-w><
noremap <c-right> <c-w>>

" Map previous and next buffers and tabs using [ and ]
nmap ]b :bnext<CR>
nmap [b :bprevious<CR>
nmap ]t :tabnext<CR>
nmap [t :tabprevious<CR>
nmap ]q :cnext<CR>
nmap [q :cprevious<CR>

" Enable folding with the equals sign
nnoremap = za

imap jk <Esc>

map <leader>l $
map <leader>h ^
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz
nnoremap n nzz
nnoremap N Nzz
command! -nargs=0 W :w
command! -nargs=0 Q :q
tnoremap <leader>jk <C-\><C-n>
tnoremap <leader><Esc> <C-\><C-n>
nmap <leader>o :only<CR>

" enable folding for git commits
au FileType git set fdm=syntax

" WSL yank support
if has("nvim")
    let g:clipboard = {
        \   'name': 'win32yank-wsl',
        \   'copy': {
        \      '+': 'win32yank.exe -i --crlf',
        \      '*': 'win32yank.exe -i --crlf',
        \    },
        \   'paste': {
        \      '+': 'win32yank.exe -o --lf',
        \      '*': 'win32yank.exe -o --lf',
        \   },
        \   'cache_enabled': 0,
        \ }
else
    let s:clip = '/mnt/c/Windows/System32/clip.exe'  " default location
    if executable(s:clip)
        augroup WSLYank
            autocmd!
            autocmd TextYankPost * call system(s:clip, join(v:event.regcontents, "\<CR>"))
        augroup END
    endif
endif

" Session Management
if argc() == 0 && !empty(glob('./Session.vim'))
    source ./Session.vim
endif

" autocmd Vimleave * mks! Session.vim

" nvim python provider
if has("nvim")
    let g:python3_host_prog = expand('~/miniconda3/bin/python')
endif

" python-syntax
let g:python_highlight_all = 1

" easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings
" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1
" move to 2char (vim-sneak)
nmap s <Plug>(easymotion-overwin-f2)
" replace search
map  / <Plug>(easymotion-sn)
" move to 1char
nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)
nmap <Leader><Leader>L <Plug>(easymotion-overwin-line)
nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" gitgutter
let g:gitgutter_map_keys = 0
nmap <leader>gh <Plug>(GitGutterPreviewHunk)
nmap ]c <Plug>(GitGutterNextHunk)
nmap [c <Plug>(GitGutterPrevHunk)

" Vim Airline
let g:airline#extensions#tabline#enabled = 1

" copilot
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true

" undotree
nnoremap <leader>u :UndotreeToggle<CR>

" minimap
let g:minimap_git_colors = 1
nnoremap <F4> :MinimapToggle<cr>

" hardtime
let g:hardtime_default_on = 1
let g:hardtime_ignore_buffer_patterns = [ "fugitive" ]
let g:hardtime_maxcount = 5

" imgpaste
autocmd FileType markdown nmap <buffer><silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>

" CoC
let g:coc_global_extensions = ['coc-json', 'coc-prettier', 'coc-pyright', 'coc-rust-analyzer']
let g:coc_config_home = expand('~/.vim')
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
            \ coc#pum#visible() ? coc#pum#next(1) :
            \ CheckBackspace() ? "\<Tab>" :
            \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() && coc#pum#info()['index'] != -1 ? coc#pum#confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gv :vsplit<CR> <C-l> gd
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> gh :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')
" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')
" Add `:CocShowOutput` command to format current buffer.
command! -nargs=0 CocShowOutput :CocCommand workspace.showOutput

" Create a function to open a neovim terminal in a small split window and run python
function! OpenTerminal(arg="")
    if empty(a:arg)
        exec "botright ".winheight(0)/4."split | terminal"
        exec "startinsert"
    else
        exec "botright ".winheight(0)/4."split | terminal" a:arg
    endif
endfunction

" <F9> to run python file in terminal
" autocmd Filetype python setlocal makeprg=python\ %
autocmd FileType python map <buffer> <F9> :w<CR>:call OpenTerminal("python %") <CR>
autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:call OpenTerminal("python %") <CR>

" Allow wrap in markdown files
autocmd FileType markdown set wrap linebreak spell
autocmd FileType text set wrap linebreak spell

" always open terminal in a bottom split
command! -nargs=? Term :call OpenTerminal(<f-args>)

" remap <Exc> to exit terminal mode
tnoremap <Esc> <C-\><C-n>

" Treesitter
if has_key(plugs, 'nvim-treesitter')
lua << EOF
require'nvim-treesitter.configs'.setup {
    -- A list of parser names, or "all" (the five listed parsers should always be installed)
    ensure_installed = { "c", "lua", "vim", "vimdoc", "query", "python", "rust" },

    -- Install parsers synchronously (only applied to `ensure_installed`)
    sync_install = false,

    -- Automatically install missing parsers when entering buffer
    -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
    auto_install = true,

    -- List of parsers to ignore installing (for "all")
    ignore_install = {},

    ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
    -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!


    highlight = {
        enable = true,

        -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
        disable = function(lang, buf)
            local max_filesize = 100 * 1024 -- 100 KB
            local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
            if ok and stats and stats.size > max_filesize then
                return true
            end
        end,

        -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
        -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
        -- Using this option may slow down your editor, and you may see some duplicate highlights.
        -- Instead of true it can also be a list of languages
        additional_vim_regex_highlighting = false,
    },

    -- tsx ftplugin does not exist so it doesn't turn on smartindent
    indent = {
        enable = true,
        disable = {},
    },
}
EOF
    set foldmethod=expr
    set foldexpr=nvim_treesitter#foldexpr()
else
    set foldmethod=indent
endif
set nofoldenable

" Telescope
if has_key(plugs,'telescope.nvim')
    " Find files using Telescope command-line sugar.
    nnoremap <leader>ff <cmd>Telescope find_files<cr>
    nnoremap <leader>fg <cmd>Telescope live_grep<cr>
    nnoremap <leader>fb <cmd>Telescope buffers<cr>
    nnoremap <leader>fh <cmd>Telescope help_tags<cr>
    nnoremap <leader>fp <cmd>lua require'telescope'.extensions.project.project{ display_type = 'full' }<cr>
    " let CocRestart execute last
    " autocmd VimEnter * autocmd DirChanged * 1sleep
    " autocmd VimEnter * autocmd DirChanged * CocRestart
lua << EOF
require('telescope').setup {
  defaults = {
    mappings = {
      i = {
        ['<C-j>'] = 'move_selection_next',
        ['<C-k>'] = 'move_selection_previous',
      },
    },
  },
  extensions = {
    project = {
      base_dirs = {
          '~/projects',
      },
      search_by = 'path',
      sync_with_nvim_tree = true,
    },
  },
}
require('telescope').load_extension('project')
EOF
else
    nnoremap <leader>ff <cmd>Files <cr>
    nnoremap <leader>fg <cmd>Rg <cr>
endif

" NERDTree/Nvim-Tree
if has_key(plugs,'nvim-tree.lua')
    " lazy load nvim-tree
    function! ToggleTree()
        if !exists(':NvimTreeToggle')
lua << EOF
require('nvim-tree').setup {
    sync_root_with_cwd = true,
    actions = {
        open_file = {
            quit_on_open = true
        }
    },
    diagnostics = {
        enable = true,
    },
}
EOF
        endif
        NvimTreeToggle
    endfunction
    nnoremap <F3> :call ToggleTree()<cr>
else
    " NERDTree specific mappings.
    " Map the F3 key to toggle NERDTree open and close.
    nnoremap <F3> :NERDTreeToggle<cr>
    let g:NERDTreeQuitOnOpen=1
    let NERDTreeShowBookmarks=1
endif

" LuaLine
if has_key(plugs,'lualine.nvim')
lua << EOF
require('lualine').setup {}
EOF
endif

" BufferLine
if has_key(plugs,'bufferline.nvim')
lua << EOF
require('bufferline').setup {
    options = {
        numbers = "buffer_id",
        offsets = {
            {
                filetype = "NvimTree",
                text = "File Explorer",
                highlight = "Directory",
                separator =true
            }
        },
        diagnostics = "coc",
        diagnostics_indicator = function(count, level, diagnostics_dict, context)
          local icon = level:match("error") and " " or " "
          return "" .. icon
        end
    },
}
EOF
endif

" Nvim-dap
if has_key(plugs,'nvim-dap')
    nnoremap <F5> :lua require'dap'.continue()<cr>
    nnoremap <F10> :lua require'dap'.step_over()<cr>
    nnoremap <F11> :lua require'dap'.step_into()<cr>
    nnoremap <F12> :lua require'dap'.step_out()<cr>
    nnoremap <leader>b :lua require'dap'.toggle_breakpoint()<cr>
    noremap <leader>dr :lua require'dap'.repl.open()<cr> <c-w>j
    nnoremap <leader>dt :lua require'dap'.terminate()<cr>
    sign define DapBreakpoint text=● texthl=WarningMsg
lua << EOF
local dap, dapui = require("dap"), require("dapui")
dapui.setup {
    layouts = { {
        elements = { {
            id = "breakpoints",
            size = 0.25
          }, {
            id = "stacks",
            size = 0.25
          }, {
            id = "watches",
            size = 0.25
          }, {
            id = "scopes",
            size = 0.25
          } },
        position = "left",
        size = 40
      }, {
        elements = { {
            id = "console",
            size = 1
          } },
        position = "bottom",
        size = 10
      } },
}
dap.listeners.after.event_initialized["dapui_config"] = function()
  dapui.open()
end
dap.listeners.before.event_terminated["dapui_config"] = function()
  dapui.close()
  dap.repl.close()
end
dap.listeners.before.event_exited["dapui_config"] = function()
  dapui.close()
  dap.repl.close()
end

dap.adapters.python = {
  type = 'executable';
  command = '~/miniconda/bin/python';
  args = { '-m', 'debugpy.adapter' };
}
dap.configurations.python = {
  {
    type = 'python';
    request = 'launch';
    name = "Launch file";
    program = "${file}";
    pythonPath = function()
      return 'python'
    end;
    console = 'integratedTerminal';
    cwd = vim.fn.getcwd();
  },
}
EOF
endif

" context
if has_key(plugs,'nvim-treesitter-context')
lua << EOF
require('treesitter-context').setup {}
EOF
endif

" Format selected block of HTML code
" autocmd FileType rust noremap <leader>f /html!<cr>f{di{i<cr><esc>O<esc>pvi{:! npx prettier --parser babel --tab-width 4 --stdin-filepath<cr>vi{<esc>xvi{>

" command! FormatHtml call s:FormatHtmlInRust()

" function! s:FormatHtmlInRust()
"     " Search for 'html!' and move to the next '{'
"     call search('html!', 'c')
"     " Delete inside braces
"     normal! f{di{
"     " Enter insert mode and add a newline
"     normal! i
"     " Go back to normal mode, open a new line above the current one, and paste the deleted content
"     normal! O
"     normal! p
"     " " Format the content inside the braces with prettier
"     normal! vi{
"     '<,'>!npx prettier --parser babel --tab-width 4 --stdin-filepath %
"     " " Additional commands
"     normal! vi{x
"     normal! vi{
" endfunction
